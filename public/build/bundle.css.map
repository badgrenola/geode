{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../DropZone.svelte"
  ],
  "sourcesContent": [
    "<script>\n\n    // import { reader } from '../reader/reader'\n\n    //Setup the web worker\n    let worker = new Worker(\"./worker/test.js\")\n    worker.onmessage = function(e){\n        //Update the state from the worker info\n        fileDetails = e.data\n        loading = false\n    };\n\n    //Setup the state\n    let isDropping = false\n    let file = null\n    let errorMessage = null\n    let loading = false\n    let fileDetails = null\n\n    //Set the allowed types\n    let allowedType = \"image/tiff\"\n\n    //Check for touch events\n    let isMobile = (('ontouchstart' in window) || (navigator.MaxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0))\n\n    //Define the input file browse events\n    const selectedFile = (e) => {\n        e.preventDefault()\n        errorMessage = null\n\n        //If a file was chosen, store it\n        if (e.target.files.length) {\n            file = e.target.files[0]\n            getFileInfo(file)\n        }\n    }\n\n    //Define the drag/drop events\n    const preventDefaults = (e) => {\n        e.preventDefault()\n        e.stopPropagation()\n    }\n\n    const onDragEnter = (e) => {\n        preventDefaults(e)\n\n        //Don't do anything if we're already loading\n        if (loading) { return }\n\n        //Update state\n        isDropping = true\n        errorMessage = null\n    }\n\n    const onDragOver = (e) => {\n        preventDefaults(e)\n\n        //Don't do anything if we're already loading\n        if (loading) { return }\n\n        //Update state\n        isDropping = true\n    }\n\n    const onDragLeave = (e) => {\n        preventDefaults(e)\n\n        //Don't do anything if we're already loading\n        if (loading) { return }\n\n        //Update state\n        isDropping = false\n    }\n\n    const onDrop = (e) => {\n        preventDefaults(e)\n\n        //Don't do anything if we're already loading\n        if (loading) { return }\n\n        //Update state\n        isDropping = false\n\n        //Ensure file is a tiff\n        if (e.dataTransfer.files[0].type == allowedType) {\n            file = e.dataTransfer.files[0];\n            getFileInfo(file)\n        } else {\n            errorMessage = \"File was not a tiff :(\"\n            file = null\n        }\n    }\n\n    const onClick = (e) => {\n        //Get the hidden input and click\n        document.getElementById(\"hiddenFileInput\").click()\n    }\n\n    //Handle the actually file reading\n    const getFileInfo = (file) => {\n\n        //Clear the old file details\n        fileDetails = null\n\n        //Post file to webworker for reading\n        worker.postMessage(file);\n\n        //Set state to loading\n        loading = true\n    }\n\n    //Update the dropzone style depending on whether we're in process of dropping/already have a file\n    let dropzoneClasses = null\n    $: {\n        dropzoneClasses = \"w-full h-full bg-gray-200 rounded-lg cursor-pointer\"\n        if (errorMessage) { dropzoneClasses += \" border-dashed border-4 border-red-500\"}\n        else if (isDropping) { dropzoneClasses += \" border-dashed border-4 border-green-500\"}\n        else if (file) { dropzoneClasses += \" border-4 border-green-400\"}\n    }\n\n</script>\n\n<style>\n\n    #dropzoneText{\n        word-break: break-word;\n    }\n\n</style>\n\n<div class=\"w-full h-full\">\n    <input \n        id=\"hiddenFileInput\" \n        type=\"file\" \n        class=\"hidden\" \n        on:change={selectedFile}\n        accept={allowedType}\n    />\n    <div\n        class={dropzoneClasses}\n        on:dragenter={onDragEnter}\n        on:dragover={onDragOver}\n        on:dragleave={onDragLeave}\n        on:drop={onDrop}\n        on:click={onClick}\n    >\n        <div class=\"h-full flex flex-col justify-center items-center text-gray-600 font-light text-sm sm:text-base overflow-hidden\">\n            <div class=\"p-4 text-center\" id=\"dropzoneText\">\n                {#if loading}\n                    <p> Loading...</p>\n                {:else if isDropping}\n                    <p>Let go to try and read the file!</p>\n                {:else if file}\n                    <p>Current file is : <i>{file.name}</i></p>\n                    <p class=\"mt-4\">{fileDetails}</p>\n                    {#if isMobile}\n                        <p class=\"mt-4\">Click her to browse for another file on your device</p>\n                    {:else}\n                        <p class=\"mt-4\">Drag another file here or click to browse</p>\n                    {/if}\n                {:else if errorMessage}\n                    <p>{errorMessage}</p>\n                {:else}\n                    {#if isMobile}\n                        <p>Click here to browse for a file on your device</p>   \n                    {:else}\n                        <p>Drag a file here or click to browse</p>   \n                    {/if}\n                {/if}\n            </div>\n        </div>\n    </div>\n</div>"
  ],
  "names": [],
  "mappings": "AA4HI,4BAAa,CAAC,AACV,UAAU,CAAE,UAAU,AAC1B,CAAC"
}